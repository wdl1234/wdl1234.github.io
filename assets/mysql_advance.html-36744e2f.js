import{_ as t,p,q as o,R as s,t as e,a1 as a}from"./framework-96b046e1.js";const l={},c=a('<h1 id="mysql进阶" tabindex="-1"><a class="header-anchor" href="#mysql进阶" aria-hidden="true">#</a> Mysql进阶</h1><h2 id="锁" tabindex="-1"><a class="header-anchor" href="#锁" aria-hidden="true">#</a> 锁</h2><h3 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h3><p>在实际的数据库系统中，每时每刻都在发生锁定，当某个用户在修改一部分数据时，MySQL会通过锁定 防止其他用户读取同一数据。</p><p>在处理并发读或者写时，通过实现一个由两种类型的锁组成的锁系统来解决问题。两种锁通常被称为共 享锁(shared lock)和排他锁(exclusive lock)，也叫读锁(read lock)和写锁(write lock)。</p><p>读锁是共享的，是互相不阻塞的。多个客户端在同一时刻可以同时读取同一个资源，而不互相干扰。写 锁则是排他的，也就是说一个写锁会阻塞其他的写锁和读锁，这是出于安全策略的考虑，只有这样才能 确保在给定的时间里，只有一个用户能执行写入，并防止其他用户读取正在写入的同一资源。</p><h3 id="锁分类" tabindex="-1"><a class="header-anchor" href="#锁分类" aria-hidden="true">#</a> 锁分类</h3><p>按锁粒度分：<br> 全局锁：锁整Database，由MySQL的SQL layer层实现<br> 表级锁：锁某Table，由MySQL的SQL layer层实现<br> 行级锁：锁某Row的索引，也可锁定行索引之间的间隙，由存储引擎实现【InnoDB】</p>',8),i=["src"],r=["src"],u=a(`<h3 id="全局锁" tabindex="-1"><a class="header-anchor" href="#全局锁" aria-hidden="true">#</a> 全局锁</h3><p>全局锁是对整个数据库实例加锁，加锁后整个实例就处于只读状态，后续的DML的写语句，DDL语句， 已经更新操作的事务提交语句都将被阻塞。其典型的使用场景是做全库的逻辑备份，对所有的表进行锁 定，从而获取一致性视图，保证数据的完整性。</p><p>加全局锁的命令为：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>flush <span class="token keyword">tables</span> <span class="token keyword">with</span> <span class="token keyword">read</span> <span class="token keyword">lock</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>释放全局锁的命令为：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">unlock</span> <span class="token keyword">tables</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者断开加锁session的连接，自动释放全局锁。</p><p>说到全局锁用于备份这个事情，还是很危险的。因为如果在主库上加全局锁，则整个数据库将不能写 入，备份期间影响业务运行，如果在从库上加全局锁，则会导致不能执行主库同步过来的操作，造成主 从延迟。</p><p>对于innodb这种支持事务的引擎，使用mysqldump备份时可以使用--single-transaction参数，利用 mvcc提供一致性视图，而不使用全局锁，不会影响业务的正常运行。而对于有MyISAM这种不支持事务 的表，就只能通过全局锁获得一致性视图，对应的mysqldump参数为--lock-all-tables。</p><h3 id="表级锁" tabindex="-1"><a class="header-anchor" href="#表级锁" aria-hidden="true">#</a> 表级锁</h3><p>MySQL的表级锁有四种：</p><ul><li>表读锁（Table Read Lock）</li><li>表写锁（Table Write Lock）</li><li>元数据锁（meta data lock，MDL)</li><li>自增锁(AUTO-INC Locks)</li></ul><p>表锁相关命令</p><p>MySQL 实现的表级锁定的争用状态变量：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 查看表锁定状态</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">show</span> <span class="token keyword">status</span> <span class="token operator">like</span> <span class="token string">&#39;table%&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>表锁有两种表现形式：</p><ul><li>表读锁（Table Read Lock）</li><li>表写锁（Table Write Lock）</li></ul><p>手动增加表锁：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">lock</span> <span class="token keyword">table</span> 表名称 <span class="token keyword">read</span><span class="token punctuation">(</span><span class="token keyword">write</span><span class="token punctuation">)</span><span class="token punctuation">,</span>表名称<span class="token number">2</span> <span class="token keyword">read</span><span class="token punctuation">(</span><span class="token keyword">write</span><span class="token punctuation">)</span>，其他<span class="token punctuation">;</span>
<span class="token comment"># 举例：</span>
<span class="token keyword">lock</span> <span class="token keyword">table</span> t <span class="token keyword">read</span><span class="token punctuation">;</span> <span class="token comment">#为表t加读锁</span>
<span class="token keyword">lock</span> <span class="token keyword">table</span> t <span class="token keyword">write</span><span class="token punctuation">;</span> <span class="token comment">#为表t加写锁</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看表锁情况：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">show</span> <span class="token keyword">open</span> <span class="token keyword">tables</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>删除表锁：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">unlock</span> <span class="token keyword">tables</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="元数据锁" tabindex="-1"><a class="header-anchor" href="#元数据锁" aria-hidden="true">#</a> 元数据锁</h3><p>元数据锁不需要显式指定，在访问一个表的时候会被自动加上，锁的作用是保证读写的正确性。</p><p>可以想象一下：如果一个查询正在遍历一个表中的数据，而执行期间另一个线程对这个表结构做变更， 删了一列，那么查询线程拿到的结果跟表结构对不上，肯定是不行的。</p><p>因此，在 MySQL 5.5 版本中引入了元数据锁，当对一个表做增删改查操作的时候，加 元数据 读锁；当 要对表做结构变更操作的时候，加 元数据 写锁。</p><ul><li>读锁是共享的，是互相不阻塞的：因此你可以有多个线程同时对一张表加读锁，保证数据在读取的 过程中不会被其他线程修改。</li><li>写锁则是排他的：也就是说一个写锁会阻塞其他的写锁和读锁，用来保证变更表结构操作的安全 性。因此，如果有两个线程要同时给一个表加字段，其中一个要等另一个执行完才能开始执行。</li></ul><h3 id="自增锁-auto-inc-locks" tabindex="-1"><a class="header-anchor" href="#自增锁-auto-inc-locks" aria-hidden="true">#</a> 自增锁(AUTO-INC Locks)</h3><p>AUTO-INC锁是一种特殊的表级锁，发生涉及AUTO_INCREMENT列的事务性插入操作时产生。</p><h3 id="行级锁" tabindex="-1"><a class="header-anchor" href="#行级锁" aria-hidden="true">#</a> 行级锁</h3><p>MySQL的行级锁，是由存储引擎来实现的，这里我们主要讲解InnoDB的行级锁。InnoDB行锁是通过给 索引上的索引项加锁来实现的，因此InnoDB这种行锁实现特点：只有通过索引条件检索的数据， InnoDB才使用行级锁，否则，InnoDB将使用表锁！</p>`,32),d=["src"],k=a('<p>如何加行级锁？</p><ul><li>对于UPDATE、DELETE和INSERT语句，InnoDB会自动给涉及数据集加写锁；</li><li>对于普通SELECT语句，InnoDB不会加任何锁</li><li>事务可以通过以下语句手动给记录集加共享锁或排他锁。</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>t1_simple<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>\n<span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n<span class="token identifier"><span class="token punctuation">`</span>pubtime<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n<span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">,</span>\n<span class="token keyword">INDEX</span> <span class="token identifier"><span class="token punctuation">`</span>idx_pu<span class="token punctuation">`</span></span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>pubtime<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span>\n<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span><span class="token punctuation">;</span>\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>t1_simple<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>t1_simple<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>t1_simple<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>t1_simple<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>t1_simple<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>t1_simple<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加读锁：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1_simple <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">4</span> <span class="token keyword">lock</span> <span class="token operator">in</span> <span class="token keyword">share</span> <span class="token keyword">mode</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>添加写锁：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1_simple <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">4</span> <span class="token keyword">for</span> <span class="token keyword">update</span><span class="token punctuation">;</span> \n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="行锁四兄弟-记录、间隙、临键和插入意向锁" tabindex="-1"><a class="header-anchor" href="#行锁四兄弟-记录、间隙、临键和插入意向锁" aria-hidden="true">#</a> 行锁四兄弟：记录、间隙、临键和插入意向锁</h3><p>记录锁（Record Locks）仅仅锁住索引记录的一行，在单条索引记录上加锁。记录锁锁住的永远是索 引，而非记录本身，即使该表上没有任何显示索引，那么innodb会在后台创建一个隐藏的聚簇索引索 引，那么锁住的就是这个隐藏的聚簇索引索引。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 加记录读锁</span>\n<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1_simple <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">lock</span> <span class="token operator">in</span> <span class="token keyword">share</span> <span class="token keyword">mode</span><span class="token punctuation">;</span>\n<span class="token comment">-- 加记录写锁</span>\n<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1_simple <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">for</span> <span class="token keyword">update</span><span class="token punctuation">;</span>\n<span class="token comment">-- 新增，修改，删除加记录写锁</span>\n<span class="token keyword">insert</span> <span class="token keyword">into</span> t1_simple <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">update</span> t1_simple <span class="token keyword">set</span> pubtime<span class="token operator">=</span><span class="token number">33</span> <span class="token keyword">where</span> id <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token keyword">delete</span> <span class="token keyword">from</span> t1_simple <span class="token keyword">where</span> id <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>间隙锁<br> （1）间隙锁(Gap Locks)，仅仅锁住一个索引区间（开区间，不包括双端端点）。<br> （2）在索引记录之间的间隙中加锁，或者是在某一条索引记录之前或者之后加锁，并不包括该索引记录 本身。<br> （3）间隙锁可用于防止幻读，保证索引间隙不会被插入数据。<br> （4）在可重复读（REPEATABLE READ）这个隔离级别下生效。</p><p>临键锁</p><p>（1）临键锁(Next-Key Locks)相当于记录锁 + 间隙锁【左开右闭区间】，例如（5,8]<br> （2）默认情况下，innodb使用临键锁来锁定记录，但在不同的场景中会退化<br> （3）当查询的索引含有唯一属性的时候，临键锁会进行优化，将其降级为记录锁，即仅锁住索引本身， 不是范围。</p><p>插入意向锁</p><p>什么是插入意向锁？<br> （1）插入意向锁（Insert Intention Locks）是一种在 INSERT 操作之前设置的一种特殊的间隙锁。<br> （2）插入意向锁表示了一种插入意图，即当多个不同的事务，同时往同一个索引的同一个间隙中插入数 据的时候，它们互相之间无需等待，即不会阻塞。<br> （3）插入意向锁不会阻止插入意向锁，但是插入意向锁会阻止其他间隙写锁（排他锁）、记录锁。</p><h3 id="加锁规则" tabindex="-1"><a class="header-anchor" href="#加锁规则" aria-hidden="true">#</a> 加锁规则</h3><p>主键索引</p><ul><li>等值条件，命中，加记录锁</li><li>等值条件，未命中，加间隙锁</li><li>范围条件，命中，包含where条件的临键区间，加临键锁</li><li>范围条件，没有命中，加间隙锁<br> 辅助索引</li><li>等值条件，命中，命中记录的辅助索引项 + 主键索引项加记录锁，辅助索引项两侧加间隙锁</li><li>等值条件，未命中，加间隙锁</li><li>范围条件，命中，包含where条件的临键区间加临键锁。命中记录的id索引项加记录锁</li><li>范围条件，没有命中，加间隙锁</li></ul><h2 id="数据库调优" tabindex="-1"><a class="header-anchor" href="#数据库调优" aria-hidden="true">#</a> 数据库调优</h2><h3 id="为什么要进行mysql数据库调优" tabindex="-1"><a class="header-anchor" href="#为什么要进行mysql数据库调优" aria-hidden="true">#</a> 为什么要进行MySQL数据库调优</h3>',20),m=["src"],v=s("h3",{id:"什么影响数据库性能",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#什么影响数据库性能","aria-hidden":"true"},"#"),e(" 什么影响数据库性能")],-1),b=["src"],g=s("h3",{id:"数据库调优到底调什么",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#数据库调优到底调什么","aria-hidden":"true"},"#"),e(" 数据库调优到底调什么")],-1),h=["src"],y=a(`<h3 id="查看sql执行计划【explain】" tabindex="-1"><a class="header-anchor" href="#查看sql执行计划【explain】" aria-hidden="true">#</a> 查看SQL执行计划【Explain】</h3><p>MySQL 提供了一个 Explain 命令, 它可以对 SELECT 语句的执行计划进行分析，并输出 SELECT 执行的 详细信息，以供开发人员针对性优化。使用explain命令来查看该SQL语句有没有使用上了索引，有没有 做全表扫描等等。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> tb_seckill_goods
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,3),q=["src"],w=a('<ul><li>id：SELECT识别符，这是SELECT查询序列号。</li><li>select_type：表示单位查询的查询类型，比如：普通查询、联合查询(union、union all)、子查 询等复杂查询。</li><li>table：表示查询的表</li><li>partitions：使用的哪些分区（对于非分区表值为null）。</li><li>type（重要）表示表的连接类型。</li><li>possible_keys：此次查询中可能选用的索引</li><li>key：查询真正使用到的索引</li><li>key_len：显示MySQL决定使用的索引size</li><li>ref：哪个字段或常数与 key 一起被使用</li><li>rows：显示此查询一共扫描了多少行，这个是一个估计值，不是精确的值。</li><li>filtered: 表示此查询条件所过滤的数据的百分比</li><li>Extra：额外信息</li></ul><h3 id="select-type" tabindex="-1"><a class="header-anchor" href="#select-type" aria-hidden="true">#</a> select_type</h3>',2),_=["src"],f=a(`<h3 id="type" tabindex="-1"><a class="header-anchor" href="#type" aria-hidden="true">#</a> type</h3><p>显示的是单位查询的连接类型或者理解为访问类型，访问性能依次从好到差：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>system
const
eq_ref
ref
fulltext
ref_or_null
unique_subquery
index_subquery
range
index_merge
index
ALL
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),L=["src"],S=s("p",null,"注意事项：",-1),T=s("ul",null,[s("li",null,"除了all之外，其他的type都可以使用到索引"),s("li",null,"最少要使用到range级别")],-1),I=s("h3",{id:"extra",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#extra","aria-hidden":"true"},"#"),e(" Extra")],-1),E=s("p",null,"这个列包含不适合在其他列中显示的，但十分重要的额外的信息，这个列可以显示的信息非常多，有几 十种。解释几个经常遇到的",-1),x=["src"],M=["src"],Q=a(`<h3 id="索引优化" tabindex="-1"><a class="header-anchor" href="#索引优化" aria-hidden="true">#</a> 索引优化</h3><p>上面mysql高级里面写了</p><p>LIMIT优化</p><p>如果预计SELECT语句的查询结果是一条，最好使用 LIMIT 1，可以停止全表扫描。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">user</span> <span class="token keyword">WHERE</span> username<span class="token operator">=</span>’it雄’<span class="token punctuation">;</span> <span class="token comment">-- username没有建立唯一索引</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">user</span> <span class="token keyword">WHERE</span> username<span class="token operator">=</span>’it雄’ <span class="token keyword">LIMIT</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>处理分页会使用到 LIMIT ，当翻页到非常靠后的页面的时候，偏移量会非常大，这时LIMIT的效率会非 常差。 LIMIT OFFSET , SIZE；<br> LIMIT的优化问题，其实是 OFFSET 的问题，它会导致MySQL扫描大量不需要的行然后再抛弃掉。</p><p>子查询优化</p><p>MySQL从4.1版本开始支持子查询，使用子查询进行SELECT语句嵌套查询，可以一次完成很多逻辑上需 要多个步骤才能完成的SQL操作。子查询虽然很灵活，但是执行效率并不高。</p><p>执行子查询时，MYSQL需要创建临时表，查询完毕后再删除这些临时表，所以子查询的速度会受到一定 的影响。这多了一个创建临时表和销毁表的过程。</p><p>优化方式：可以使用连接查询（JOIN）代替子查询，连接查询时不需要建立临时表，其速度比子查询 快</p>`,10),B=s("br",null,null,-1),N=["src"],O=a(`<h3 id="sql语句性能分析" tabindex="-1"><a class="header-anchor" href="#sql语句性能分析" aria-hidden="true">#</a> SQL语句性能分析</h3><p>Query Profiler是MySQL自带的一种Query诊断分析工具，通过它可以分析出一条SQL语句的硬件性能 瓶颈在什么地方。通常我们是使用的explain，以及slow query log都无法做到精确分析，但是Query Profiler却可以定位出一条SQL语句执行的各种资源消耗情况，比如CPU，IO等，以及该SQL执行所耗 费的时间等。</p><p>不过该工具只有在MySQL 5.0.37以及以上版本中才有实现。默认的情况下，MySQL的该功能没有打 开，需要自己手动启动。</p><p>开启Profile功能</p><p>Profile 功能由MySQL会话变量 : profiling控制，默认是OFF关闭状态。<br> 查看是否开启了Profile功能:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> @<span class="token variable">@profiling</span><span class="token punctuation">;</span>
<span class="token comment">-- 或者</span>
<span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">&#39;%profil%&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>开启profile功能</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 1是开启、0是关闭</span>
<span class="token keyword">set</span> profiling<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>语法</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SHOW</span> PROFILE <span class="token punctuation">[</span><span class="token keyword">type</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token keyword">type</span><span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token keyword">FOR</span> QUERY n<span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token keyword">LIMIT</span> row_count <span class="token punctuation">[</span><span class="token keyword">OFFSET</span> <span class="token keyword">offset</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token keyword">type</span>: {
<span class="token keyword">ALL</span>
<span class="token operator">|</span> BLOCK IO
<span class="token operator">|</span> CONTEXT SWITCHES
<span class="token operator">|</span> CPU
<span class="token operator">|</span> IPC
<span class="token operator">|</span> MEMORY
<span class="token operator">|</span> PAGE FAULTS
<span class="token operator">|</span> SOURCE
<span class="token operator">|</span> SWAPS
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>show profile 和 show profiles 语句可以展示当前会话(退出session后,profiling重置为0) 中执行 语句的资源使用情况.</li><li>show profiles :以列表形式显示最近发送到服务器上执行的语句的资源使用情况，显示的记录数由 变量:profiling_history_size 控制,默认15条</li><li>show profile: 展示最近一条语句执行的详细资源占用信息,默认显示 Status和Duration两列</li><li>show profile 还可根据 show profiles 列表中的 Query_ID ,选择显示某条记录的性能分析信息</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 查看某条SQL的性能分析信息</span>
<span class="token keyword">show</span> profile <span class="token keyword">for</span> query <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token comment">-- 查看某条SQL的具体某个指标的性能分析</span>
<span class="token keyword">show</span> profile cpu <span class="token keyword">for</span> query <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),R=["src"],D=a(`<p>分析案例<br> 查看是否打开了性能分析功能</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> @<span class="token variable">@profiling</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,2),A=["src"],$=a(`<p>打开 profiling 功能</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">set</span> profiling<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,2),C=["src"],P=s("p",null,"执行 show profiles 查看分析列表",-1),U=["src"],F=a(`<p>查询第二条语句的执行情况</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">show</span> profile <span class="token keyword">for</span> query <span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,2),G=["src"],V=a(`<h3 id="慢查询日志" tabindex="-1"><a class="header-anchor" href="#慢查询日志" aria-hidden="true">#</a> 慢查询日志</h3><p>数据库性能问题，根据经验来说，80%以上都是由于慢SQL造成的。<br> 数据库查询快慢是影响项目性能的一大因素，对于数据库，我们除了要优化 SQL，更重要的是得先找到 需要优化的SQL。<br> MySQL数据库“慢查询日志”功能，用来记录查询时间超过某个设定值的SQL语句，这将极大程度帮助我 们快速定位到症结所在，以便对症下药。至于查询时间的多少才算慢，每个项目、业务都有不同的要 求。<br> MySQL的慢查询日志功能默认是关闭的，需要手动开启</p><p>开启慢查询日志</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 查看是否开启慢查询日志</span>
<span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">&#39;%slow_query%&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">&#39;long_query_time%&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),H=["src"],Y=a(`<p>开启慢查询功能</p><p>注意：打开慢查询日志可能会对系统性能有一点点影响，如果你的MySQL是主从结构，可以考虑打开其 中一台从服务器的慢查询日志，这样既可以监控慢查询，对系统性能影响又小。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 开启慢查询日志</span>
<span class="token keyword">set</span> <span class="token keyword">global</span> slow_query_log<span class="token operator">=</span><span class="token keyword">on</span><span class="token punctuation">;</span>
<span class="token comment"># 大于1秒钟的数据记录到慢日志中，如果设置为默认0，则会有大量的信息存储在磁盘中，磁盘很容易满</span>
掉
<span class="token comment"># 如果设置不生效，建议配置在my.cnf配置文件中</span>
<span class="token keyword">set</span> <span class="token keyword">global</span> long_query_time<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token comment"># 记录没有索引的查询。</span>
<span class="token keyword">set</span> <span class="token keyword">global</span> log_queries_not_using_indexes<span class="token operator">=</span><span class="token keyword">on</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>慢查询日志格式</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># Time: 2021-07-27T08:32:44.023309Z</span>
<span class="token comment"># User@Host: root[root] @ [172.26.233.201] Id: 1243</span>
<span class="token comment"># Query_time: 218.295526 Lock_time: 0.000126 Rows_sent: 10959</span>
Rows_examined: <span class="token number">10929597</span>
<span class="token keyword">use</span> hero_all<span class="token punctuation">;</span>
<span class="token keyword">SET</span> <span class="token keyword">timestamp</span><span class="token operator">=</span><span class="token number">1627374764</span><span class="token punctuation">;</span>
<span class="token comment"># 慢查询SQL语句</span>
<span class="token keyword">select</span> tk<span class="token punctuation">.</span>id<span class="token punctuation">,</span>ts<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span> tb_seckill_goods ts <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> tb_sku tk <span class="token keyword">ON</span>
tk<span class="token punctuation">.</span>id<span class="token operator">=</span>ts<span class="token punctuation">.</span>id <span class="token keyword">where</span> ts<span class="token punctuation">.</span>id<span class="token operator">&gt;</span><span class="token number">100</span> <span class="token keyword">order</span> <span class="token keyword">by</span> ts<span class="token punctuation">.</span>price<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),W=["src"],z=a(`<h3 id="分析慢查询日志工具" tabindex="-1"><a class="header-anchor" href="#分析慢查询日志工具" aria-hidden="true">#</a> 分析慢查询日志工具</h3><p>使用mysqldumpslow工具，mysqldumpslow是MySQL自带的慢查询日志工具。可以使用 mysqldumpslow工具搜索慢查询日志中的SQL语句。<br> 得到按照时间排序的前10条里面含有左连接的查询语句：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token punctuation">[</span>root<span class="token variable">@localhost</span> mysql<span class="token punctuation">]</span><span class="token comment"># mysqldumpslow -s t -t 10 -g &quot;left join&quot;</span>
<span class="token operator">/</span>var<span class="token operator">/</span>lib<span class="token operator">/</span>mysql<span class="token operator">/</span>slow<span class="token punctuation">.</span>log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,3),K=["src"],J=a(`<div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token punctuation">[</span>root<span class="token variable">@localhost</span> <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment"># mysqldumpslow -s t /var/lib/mysql/localhost-slow.log</span>
Reading mysql slow query log <span class="token keyword">from</span> <span class="token operator">/</span>var<span class="token operator">/</span>lib<span class="token operator">/</span>mysql<span class="token operator">/</span>localhost<span class="token operator">-</span>slow<span class="token punctuation">.</span>log
Count: <span class="token number">1</span> <span class="token keyword">Time</span><span class="token operator">=</span><span class="token number">77.12</span>s <span class="token punctuation">(</span><span class="token number">77</span>s<span class="token punctuation">)</span> <span class="token keyword">Lock</span><span class="token operator">=</span><span class="token number">0.00</span>s <span class="token punctuation">(</span><span class="token number">0</span>s<span class="token punctuation">)</span> <span class="token keyword">Rows</span><span class="token operator">=</span><span class="token number">0.0</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
root<span class="token punctuation">[</span>root<span class="token punctuation">]</span>@<span class="token punctuation">[</span><span class="token number">192.168</span><span class="token number">.200</span><span class="token number">.1</span><span class="token punctuation">]</span>
<span class="token keyword">select</span> tk<span class="token punctuation">.</span>id<span class="token punctuation">,</span>ts<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span> tb_seckill_goods ts <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> tb_sku tk <span class="token keyword">ON</span>
tk<span class="token punctuation">.</span>id<span class="token operator">=</span>ts<span class="token punctuation">.</span>id <span class="token keyword">where</span> ts<span class="token punctuation">.</span>id<span class="token operator">&gt;</span>N <span class="token keyword">order</span> <span class="token keyword">by</span> ts<span class="token punctuation">.</span>price
Count: <span class="token number">1</span> <span class="token keyword">Time</span><span class="token operator">=</span><span class="token number">2.00</span>s <span class="token punctuation">(</span><span class="token number">2</span>s<span class="token punctuation">)</span> <span class="token keyword">Lock</span><span class="token operator">=</span><span class="token number">0.00</span>s <span class="token punctuation">(</span><span class="token number">0</span>s<span class="token punctuation">)</span> <span class="token keyword">Rows</span><span class="token operator">=</span><span class="token number">1.0</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
root<span class="token punctuation">[</span>root<span class="token punctuation">]</span>@<span class="token punctuation">[</span><span class="token number">192.168</span><span class="token number">.200</span><span class="token number">.1</span><span class="token punctuation">]</span>
<span class="token keyword">select</span> sleep<span class="token punctuation">(</span>N<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数据库优化-结构优化" tabindex="-1"><a class="header-anchor" href="#数据库优化-结构优化" aria-hidden="true">#</a> 数据库优化-结构优化</h3><ul><li><p>将字段很多的表分解成多个表（分表）<br> 对于字段较多的表，如果有些字段的使用频率很低，可以将这些字段分离出来形成新表。因为当一个表 的数据量很大时，会由于使用频率低的字段的存在而变慢。<br> 项目实战的时候会将一个完全信息的表里面的数据拆分出来 形成多个新表 每个新表负责那一块的数据查 询。</p></li><li><p>增加中间表<br> 对于需要经常联合查询的表，可以建立中间表以提高查询效率。通过建立中间表，将需要通过联合查询 的数据插入到中间表中，然后将原来的联合查询改为对中间表的查询。<br> 通常都是在统计当中使用，每次统计报表的时候都是离线统计，后台有有一个线程对你这统计查询结果 放入一个中间表，然后你对这个中间表查询。</p></li><li><p>增加冗余字段</p></li></ul><p>设计数据表时应尽量遵循关系数据库范式的规约，尽可能的减少冗余字段，让数据库设计看起来精致、 优雅。但是合理的加入冗余字段可以提高查询速度。<br> 表的规范化程度越高，表和表之间的关系越多，需要连接查询的情况也就越多，性能也就越差。</p><p>注意：冗余字段的值在一个表中修改了，就要想办法在其他表中更新，否则就会导致数据不一致的问 题。</p><h3 id="服务器层面优化" tabindex="-1"><a class="header-anchor" href="#服务器层面优化" aria-hidden="true">#</a> 服务器层面优化</h3><p>缓冲区优化<br> 降低磁盘写入次数</p><h3 id="服务器硬件优化" tabindex="-1"><a class="header-anchor" href="#服务器硬件优化" aria-hidden="true">#</a> 服务器硬件优化</h3><p>提升硬件设备，例如选择尽量高频率的内存（频率不能高于主板的支持）、提升网络带宽、使用SSD高 速磁盘、提升CPU性能等。</p><h2 id="集群搭建之主从复制" tabindex="-1"><a class="header-anchor" href="#集群搭建之主从复制" aria-hidden="true">#</a> 集群搭建之主从复制</h2><h3 id="主从复制作用" tabindex="-1"><a class="header-anchor" href="#主从复制作用" aria-hidden="true">#</a> 主从复制作用</h3><p>通过搭建MySQL主从集群，可以缓解MySQL的数据存储以及访问的压力</p><ol><li>数据安全（主备）：给主服务增加一个数据备份。基于这个目的，可以搭建主从架构，或者也可以 基于主从架构搭建互主的架构。</li><li>读写分离（主从）：对于大部分的Java业务系统来说，都是读多写少的，读请求远远高于写请求。 这时，当主服务的访问压力过大时，可以将数据读请求转为由从服务来分担，主服务只负责数据写 入的请求，这样大大缓解数据库的访问压力。</li><li>故障转移-高可用：当MySQL主服务宕机后，可以由一台从服务切换成为主服务，继续提供数据读 写功能。<br> 对于高可用架构，主从数据的同步也只是实现故障转移的一个前提条件，要实现MySQL主从切换， 还需要依靠一些其他的中间件来实现。比如MMM、MHA、MGR。</li></ol><p>在一般项目中，如果数据库的访问压力没有那么大，那读写分离不一定是必须要做的，但是，主从架构 和高可用架构则是必须要搭建的。</p><h3 id="主从复制原理" tabindex="-1"><a class="header-anchor" href="#主从复制原理" aria-hidden="true">#</a> 主从复制原理</h3>`,15),X=["src"],j=a("<p>MySQL服务的主从架构都是通过 binlog 日志文件来进行的。</p><p>具体流程如下：</p><ol><li>在主服务上打开binlog记录每一步的数据库操作</li><li>然后，从服务上会有一个IO线程，负责跟主服务建立一个TCP连接，请求主服务将binlog传输过来</li><li>这时，主库上会有一个IO dump线程，负责通过这个TCP连接把binlog日志传输给从库的IO线程</li><li>主服务器MySQL服务将所有的写操作记录在 binlog 日志中，并生成 log dump 线程，将 binlog 日 志传给从服务器MySQL服务的 I/O 线程。</li><li>接着从服务的IO线程会把读取到的binlog日志数据写入自己的relay日志文件中。</li><li>然后从服务上另外一个SQL线程会读取relay日志里的内容，进行操作重演，达到还原数据的目的。</li></ol><p>注意：</p><ol><li>主从复制是异步的逻辑的 SQL 语句级的复制</li><li>复制时，主库有一个 I/O 线程，从库有两个线程，即 I/O 和 SQL 线程</li><li>实现主从复制的必要条件是主库要开启记录 binlog 的功能</li><li>作为复制的所有 MySQL 节点的 server-id 都不能相同</li><li>binlog 文件只记录对数据内容有更改的 SQL 语句，不记录任何查询语句</li><li>双方MySQL必须版本一致，至少需要主服务的版本低于从服务</li><li>两节点间的时间需要同步</li></ol><p>主从复制形式：</p><ol><li>一主一从</li><li>主主复制</li><li>一主多从</li><li>多主一从</li><li>级联复制</li></ol>",7),Z=["src"],ss=s("p",null,"3）一主多从",-1),ns=["src"],as=["src"],es=["src"],ts=s("h3",{id:"binlog和relay日志",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#binlog和relay日志","aria-hidden":"true"},"#"),e(" binlog和relay日志")],-1),ps=s("ul",null,[s("li",null,"binlog：二进制日志，将数据改变记录到二进制（binary）日志中，可用于本机数据恢复和主从同 步。"),s("li",null,"relaylog：中继日志，Slave节点会把中继日志中的事件信息一条一条的在本地执行一次，实现主 从同步这个过程也叫数据重放。")],-1),os=s("h3",{id:"binlog的三种模式",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#binlog的三种模式","aria-hidden":"true"},"#"),e(" binlog的三种模式")],-1),ls=["src"],cs=["src"],is=["src"],rs=a(`<h3 id="开启binlog" tabindex="-1"><a class="header-anchor" href="#开启binlog" aria-hidden="true">#</a> 开启binlog</h3><p>修改my.cnf文件<br> 在[mysqld]段下添加：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># binlog刷盘策略</span>
sync_binlog<span class="token operator">=</span><span class="token number">1</span>
<span class="token comment"># 需要备份的数据库</span>
binlog<span class="token operator">-</span><span class="token keyword">do</span><span class="token operator">-</span>db<span class="token operator">=</span>hello
<span class="token comment"># 不需要备份的数据库</span>
binlog<span class="token operator">-</span><span class="token keyword">ignore</span><span class="token operator">-</span>db<span class="token operator">=</span>mysql
<span class="token comment"># 启动二进制文件</span>
log<span class="token operator">-</span>bin<span class="token operator">=</span>mysql<span class="token operator">-</span>bin
<span class="token comment"># 服务器ID</span>
server<span class="token operator">-</span>id<span class="token operator">=</span><span class="token number">132</span>
<span class="token comment">#只保留7天的二进制日志，以防磁盘被日志占满(可选)</span>
expire<span class="token operator">-</span>logs<span class="token operator">-</span>days<span class="token operator">=</span><span class="token number">7</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),us=["src"],ds=s("br",null,null,-1),ks=["src"],ms=a(`<h3 id="调整binlog日志模式" tabindex="-1"><a class="header-anchor" href="#调整binlog日志模式" aria-hidden="true">#</a> 调整binlog日志模式</h3><p>查看binlog的日志模式：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">&#39;binlog_format&#39;</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">---------------+-------+</span>
<span class="token operator">|</span> Variable_name <span class="token operator">|</span> <span class="token keyword">Value</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">---------------+-------+</span>
<span class="token operator">|</span> binlog_format <span class="token operator">|</span> <span class="token keyword">ROW</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">---------------+-------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调整binlog的日志模式：binlog的三种格式： STATEMENT 、 ROW 、 MIXED 。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">set</span> binlog_format<span class="token operator">=</span>STATEMENT<span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">&#39;binlog_format&#39;</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">---------------+-----------+</span>
<span class="token operator">|</span> Variable_name <span class="token operator">|</span> <span class="token keyword">Value</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">---------------+-----------+</span>
<span class="token operator">|</span> binlog_format <span class="token operator">|</span> STATEMENT <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">---------------+-----------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="如何查看binlog和relaylog日志" tabindex="-1"><a class="header-anchor" href="#如何查看binlog和relaylog日志" aria-hidden="true">#</a> 如何查看binlog和relaylog日志</h3><p>方式一：使用mysqlbinlog查看binlog日志文件</p><p>因为binlog日志文件：mysql-bin.000005是二进制文件，没法用vi等打开，这时就需要mysql的自带的 mysqlbinlog工具进行解码，执行： mysqlbinlog mysql-bin.000005 可以将二进制文件转为可阅读的 sql语句。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysqlbinlog <span class="token comment">--base64-output=decode-rows -v -v mysql-bin.000001 &gt; binlog.txt</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>方式二：在MySQL终端查看binlog</p><p>show master logs ，查看所有二进制日志列表 ，和 show binary logs 同义。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">show</span> master logs<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">------------------+-----------+</span>
<span class="token operator">|</span> Log_name <span class="token operator">|</span> File_size <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">------------------+-----------+</span>
<span class="token operator">|</span> mysql<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token number">000001</span> <span class="token operator">|</span> <span class="token number">385</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">------------------+-----------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 show binlog events 命令可以以列表的形式显示日志中的事件信息。</p><p>show binlog events命令的格式：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">show</span> binlog events <span class="token punctuation">[</span><span class="token operator">IN</span> <span class="token string">&#39;log_name&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">FROM</span> pos<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">LIMIT</span> <span class="token punctuation">[</span><span class="token keyword">offset</span><span class="token punctuation">,</span><span class="token punctuation">]</span> row_count<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,15),vs=["src"],bs=a(`<p>切换binlog文件：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> flush logs<span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：刷新日志会生成一个新的日志文件</p><h3 id="基于pos主从复制" tabindex="-1"><a class="header-anchor" href="#基于pos主从复制" aria-hidden="true">#</a> 基于Pos主从复制</h3><p>开放端口</p><p>需要将3306端口放行，如果是内网也可关闭防火墙</p><p>主服务器配置<br> 查看binlog是否开启可以使用命令：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">&#39;log_bin%&#39;</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">---------------------------------+-------+</span>
<span class="token operator">|</span> Variable_name <span class="token operator">|</span> <span class="token keyword">Value</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">---------------------------------+-------+</span>
<span class="token operator">|</span> log_bin <span class="token operator">|</span> <span class="token keyword">OFF</span> <span class="token operator">|</span>
<span class="token operator">|</span> log_bin_basename <span class="token operator">|</span> <span class="token operator">|</span>
<span class="token operator">|</span> log_bin_index <span class="token operator">|</span> <span class="token operator">|</span>
<span class="token operator">|</span> log_bin_trust_function_creators <span class="token operator">|</span> <span class="token keyword">OFF</span> <span class="token operator">|</span>
<span class="token operator">|</span> log_bin_use_v1_row_events <span class="token operator">|</span> <span class="token keyword">OFF</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">---------------------------------+-------+</span>
<span class="token number">5</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.12</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>log_bin如果是 OFF 代表是未开启状态</p>`,9),gs=["src"],hs=a(`<p>第一步：修改my.cnf文件</p><p>在[mysqld]段下添加：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># binlog刷盘策略</span>
sync_binlog<span class="token operator">=</span><span class="token number">1</span>
<span class="token comment"># 需要备份的数据库</span>
binlog<span class="token operator">-</span><span class="token keyword">do</span><span class="token operator">-</span>db<span class="token operator">=</span>hello
<span class="token comment"># 不需要备份的数据库</span>
binlog<span class="token operator">-</span><span class="token keyword">ignore</span><span class="token operator">-</span>db<span class="token operator">=</span>mysql
<span class="token comment"># 启动二进制文件</span>
log<span class="token operator">-</span>bin<span class="token operator">=</span>mysql<span class="token operator">-</span>bin
<span class="token comment"># 服务器ID</span>
server<span class="token operator">-</span>id<span class="token operator">=</span><span class="token number">132</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二步：重启mysql服务</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>systemctl restart mysqld
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>第三步：主机给从机授备份权限</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span><span class="token keyword">GRANT</span> <span class="token keyword">REPLICATION</span> SLAVE <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">&#39;从机MySQL用户名&#39;</span><span class="token variable">@&#39;从机IP&#39;</span> identified
<span class="token keyword">by</span> <span class="token string">&#39;从机MySQL密码&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">GRANT</span> <span class="token keyword">REPLICATION</span> SLAVE <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">&#39;root&#39;</span><span class="token variable">@&#39;%&#39;</span> identified <span class="token keyword">by</span> <span class="token string">&#39;root&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：一般不用root帐号，“%”表示所有客户端都可能连，只要帐号，密码正确，此处可用具体客户端 IP代替，如39.99.131.178，加强安全。</p><p>第四步：刷新权限</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> FLUSH <span class="token keyword">PRIVILEGES</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>第五步：查询master的状态</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">show</span> master <span class="token keyword">status</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">------------------+----------+--------------+------------------+------------</span>
<span class="token comment">-------+</span>
<span class="token operator">|</span> <span class="token keyword">File</span> <span class="token operator">|</span> Position <span class="token operator">|</span> Binlog_Do_DB <span class="token operator">|</span> Binlog_Ignore_DB <span class="token operator">|</span>
Executed_Gtid_Set <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">------------------+----------+--------------+------------------+------------</span>
<span class="token comment">-------+</span>
<span class="token operator">|</span> mysql<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token number">000002</span> <span class="token operator">|</span> <span class="token number">593</span> <span class="token operator">|</span> hello <span class="token operator">|</span> mysql <span class="token operator">|</span>
<span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">------------------+----------+--------------+------------------+------------</span>
<span class="token comment">-------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从服务器配置</p><p>第一步：修改my.conf文件</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>
server<span class="token operator">-</span>id<span class="token operator">=</span><span class="token number">133</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>第二步：重启mysqld服务</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>systemctl restart mysqld
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>第三步：重启并登录到MySQL进行配置Slave</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span>change master <span class="token keyword">to</span>
master_host<span class="token operator">=</span><span class="token string">&#39;172.17.187.78&#39;</span><span class="token punctuation">,</span>
master_port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>
master_user<span class="token operator">=</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">,</span>
master_password<span class="token operator">=</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">,</span>
master_log_file<span class="token operator">=</span><span class="token string">&#39;mysql-bin.000001&#39;</span><span class="token punctuation">,</span>
master_log_pos<span class="token operator">=</span><span class="token number">1109</span><span class="token punctuation">,</span>
MASTER_AUTO_POSITION<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：语句中间不要断开， master_port 为MySQL服务器端口号（无引号）， master_user 为 执行同步操作的数据库账户， 593 无单引号（此处的 1109 就是 show master status 中看到的 position 的值，这里的 mysql-bin.000001 就是 file 对应的值）。</p><p>第四步：启动从服务器复制功能</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span><span class="token keyword">start</span> slave<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>第五步：检查从服务器复制功能状态</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">show</span> slave <span class="token keyword">status</span> \\G<span class="token punctuation">;</span>
……………………<span class="token punctuation">(</span>省略部分<span class="token punctuation">)</span>
Slave_IO_Running: Yes <span class="token comment">//此状态必须YES</span>
Slave_SQL_Running: Yes <span class="token comment">//此状态必须YES</span>
……………………<span class="token punctuation">(</span>省略部分<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注：Slave_IO及Slave_SQL进程必须正常运行，即YES状态，否则都是错误的状态(如：其中一个NO均 属错误)。</p>`,25),ys=["src"],qs=s("p",null,"搭建成功之后，往主机中插入数据，看看从机中是否有数据",-1),ws=s("h3",{id:"基于gtid的主从复制",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#基于gtid的主从复制","aria-hidden":"true"},"#"),e(" 基于GTID的主从复制")],-1),_s=s("p",null,"从 MySQL 5.6.5 开始新增了一种基于 GTID 的复制方式。GTID即全局事务ID （Global Transaction Identifier），其保证每个主节点上提交的事务，在从节点可以一致性的复制。",-1),fs=s("p",null,"这种方式强化了数据库的主备一致性，故障恢复以及容错能力。GTID在一主一从情况下没有优势，对于 两主以上的结构优势异常明显，可以在数据不丢失的情况下切换新主。",-1),Ls=s("p",null,"GTID实际上是由UUID+TID (即transactionId)组成的，其中UUID(即server_uuid) 产生于auto.conf文 件，是一个MySQL实例的唯一标识。TID代表了该实例上已经提交的事务数量，并且随着事务提交单调 递增，所以GTID能够保证每个MySQL实例事务的执行。GTID在一组复制中，全局唯一。 通过GTID的 UUID可以知道这个事务在哪个实例上提交的。",-1),Ss=["src"],Ts=["src"],Is=s("p",null,"GTID 主从复制原理",-1),Es=["src"],xs=s("p",null,"通过GTID可以很方便的进行复制结构上的故障转移，新主设置，这就很好地解决了下面这个图所展现出 来的问题。",-1),Ms=["src"],Qs=["src"],Bs=a(`<blockquote><p>注意：在构建主从复制之前，在一台将成为主的实例上进行一些操作（如：数据清理等），通过 GTID复制，这些在主从成立之前的操作也会被复制到从服务器上，引起复制失败。也就是说通过 GTID复制都是从最先开始的事务日志开始，即使这些操作在复制之前执行。比如在server1上执行 一些drop、delete的清理操作，接着在server2上执行change的操作，会使得server2也进行 server1的清理操作。</p></blockquote><p>搭建GTID同步集群</p><p>他的搭建方式跟我们上面的主从架构整体搭建方式差不多。只是需要在my.cnf中修改一些配置。</p><p>1）主节点</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>gtid_mode<span class="token operator">=</span><span class="token keyword">on</span>
enforce_gtid_consistency<span class="token operator">=</span><span class="token keyword">on</span>
<span class="token comment"># 强烈建议，其他格式可能造成数据不一致</span>
binlog_format<span class="token operator">=</span><span class="token keyword">row</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）从节点</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>gtid_mode<span class="token operator">=</span><span class="token keyword">on</span>
enforce_gtid_consistency<span class="token operator">=</span><span class="token keyword">on</span>
<span class="token comment"># 做级联复制的时候，再开启。允许下端接入slave</span>
log_slave_updates<span class="token operator">=</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3）使用GTID的方式，salve重新挂载master端：</p><p>启动以后最好不要立即执行事务，先change master上，然后在执行事务。<br> 使用下面的sql切换slave到新的master。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 停止从节点</span>
stop slave<span class="token punctuation">;</span>
<span class="token comment"># 切换主节点配置，比基于pos简单不少</span>
change master <span class="token keyword">to</span>
master_host<span class="token operator">=</span><span class="token string">&#39;172.17.187.78&#39;</span><span class="token punctuation">,</span>
master_port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>
master_user<span class="token operator">=</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">,</span>
master_password<span class="token operator">=</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">,</span>
master_auto_position<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token comment"># 启动从节点</span>
<span class="token keyword">start</span> slave<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4）启动GTID的两种情况</p><p>分别重启主服务和从服务，就可以开启GTID同步复制，启动方法有两种情况</p><p>情况一：如果是新搭建的服务器，直接启动就行了<br> 情况二：如果是在已经跑的服务器，需要重启mysqld</p><ul><li><p>启动之前要先关闭master的写入，保证所有slave端都已经和master端数据保持同步</p></li><li><p>所有slave需要加上skip_slave_start=1的配置参数，避免启动后还是使用老的复制协议</p></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 避免启动后还是使用老的复制协议</span>
skip_slave_start<span class="token operator">=</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>5）测试</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">show</span> master <span class="token keyword">status</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="异步复制" tabindex="-1"><a class="header-anchor" href="#异步复制" aria-hidden="true">#</a> 异步复制</h3><p>MySQL主从集群默认采用的是一种异步复制的机制。<br> 主服务在执行用户提交的事务后，写入binlog日志，然后就给客户端返回一个成功的响应了。而binlog 会由一个dump线程异步发送给Slave从服务。由于这个发送binlog的过程是异步的。主服务在向客户端 反馈执行结果时，是不知道binlog是否同步成功了的。这时候如果主服务宕机了，而从服务还没有备份 到新执行的binlog，那就有可能会丢数据。</p>`,19),Ns=["src"],Os=s("p",null,"这就要靠MySQL的半同步复制机制来保证数据安全",-1),Rs=s("h3",{id:"半同步复制",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#半同步复制","aria-hidden":"true"},"#"),e(" 半同步复制")],-1),Ds=s("p",null,[e("半同步复制机制是一种介于异步复制和全同步复制之前的机制。"),s("br"),e(" 主库在执行完客户端提交的事务后，并不是立即返回客户端响应，而是等待至少一个从库接收并写到 relaylog中，才会返回给客户端。"),s("br"),e(" MySQL在等待确认时，默认会等 10 秒，如果超过10秒没有收到ack，就会降级成为 异步复制 。")],-1),As=["src"],$s=s("p",null,"这种半同步复制相比异步复制，能够有效的提高数据的安全性。但是这种安全性也不是绝对的，他只保 证事务提交后的binlog至少传输到了一个从库，且并不保证从库应用这个事务的binlog是成功的。另一 方面，半同步复制机制也会造成一定程度的延迟，这个延迟时间最少是一个TCP/IP请求往返的时间。整 个服务的性能是会有所下降的。而当从服务出现问题时，主服务需要等待的时间就会更长，要等到从服 务的服务恢复或者请求超时才能给用户响应。",-1),Cs=s("h3",{id:"主从同步延迟的原因及解决办法",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#主从同步延迟的原因及解决办法","aria-hidden":"true"},"#"),e(" 主从同步延迟的原因及解决办法")],-1),Ps=s("p",null,"原因",-1),Us=s("p",null,"在我们搭建的这个主从集群中，有一个比较隐藏的问题，就是这样的主从复制之间会有延迟。这在做了 读写分离后，会更容易体现出来。即数据往主服务写，而读数据在从服务读。这时候这个主从复制延迟 就有可能造成刚插入了数据但是查不到。当然，这在我们目前的这个集群中是很难出现的，但是在大型 集群中会很容易出现。",-1),Fs=["src"],Gs=s("p",null,"解决办法",-1),Vs=["src"],Hs=s("h3",{id:"判断主从延迟",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#判断主从延迟","aria-hidden":"true"},"#"),e(" 判断主从延迟")],-1),Ys=s("br",null,null,-1),Ws=["src"],zs=s("h2",{id:"读写分离",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#读写分离","aria-hidden":"true"},"#"),e(" 读写分离")],-1),Ks=s("p",null,"Mycat是一个数据库中间件，支持读写分离、分库分表、还支持水平分片与垂直分片。",-1),Js=s("ul",null,[s("li",null,"水平分片：一个表格的数据分割到多个节点上，按照行分割"),s("li",null,"垂直分片：一个数据库中多个表格A，B，C，A存储到节点1上，B存储到节点2上，C存储到节点3 上。")],-1),Xs=["src"],js=["src"],Zs=a(`<h3 id="下载安装" tabindex="-1"><a class="header-anchor" href="#下载安装" aria-hidden="true">#</a> 下载安装</h3><blockquote><p>注意：需要jdk</p></blockquote><p>下载Mycat</p><div class="language-linux line-numbers-mode" data-ext="linux"><pre class="language-linux"><code>wget http://dl.mycat.org.cn/1.6.7.1/Mycat-server-1.6.7.1-release-
20190627191042-linux.tar.gz   
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>解压缩</p><div class="language-linux line-numbers-mode" data-ext="linux"><pre class="language-linux"><code>tar -zxf Mycat-server-1.6.7.1-release-20190627191042-linux.tar.gz
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>进行mycat/bin目录，启动Mycat</p><div class="language-linux line-numbers-mode" data-ext="linux"><pre class="language-linux"><code>/root/mycat/bin/mycat start
/root/mycat/bin/mycat stop
/root/mycat/bin/mycat restart
/root/mycat/bin/mycat status
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>访问Mycat</p><p>使用MySQL的客户端直接连接mycat服务。默认服务端口为【 8066 】。</p><div class="language-linux line-numbers-mode" data-ext="linux"><pre class="language-linux"><code>mysql -uroot -p123456 -h127.0.0.1 -P8066
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="配置mycat" tabindex="-1"><a class="header-anchor" href="#配置mycat" aria-hidden="true">#</a> 配置Mycat</h3><p>1）配置端口和密码</p><p>修改server.xml，配置端口和密码：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--修改mycat服务端口--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>serverPort<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>8067<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span> <span class="token attr-name">defaultAccount</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>123456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>schemas<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>mycat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>user<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>schemas<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>mycat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>readOnly<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）配置读写分离</p><p>修改schema.xml，配置读写分离：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mycat:schema</span> <span class="token name">SYSTEM</span> <span class="token string">&quot;schema.dtd&quot;</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mycat:</span>schema</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>mycat</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://io.mycat/<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>schema</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mycat<span class="token punctuation">&quot;</span></span> <span class="token attr-name">checkSQLschema</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>false<span class="token punctuation">&quot;</span></span> <span class="token attr-name">sqlMaxLimit</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>100<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>tb_user<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dataNode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dn1<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>t1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dataNode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dn1<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>t2<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dataNode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dn1<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>t3<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dataNode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dn1<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>schema</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dn1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>host1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mycat<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataHost</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>host1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">maxCon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1000<span class="token punctuation">&quot;</span></span> <span class="token attr-name">minCon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>10<span class="token punctuation">&quot;</span></span> <span class="token attr-name">balance</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span>
<span class="token attr-name">writeType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dbType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mysql<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dbDriver</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>native<span class="token punctuation">&quot;</span></span> <span class="token attr-name">switchType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span>
<span class="token attr-name">slaveThreshold</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>100<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>heartbeat</span><span class="token punctuation">&gt;</span></span>select user()<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>heartbeat</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- can have multi write hosts --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>writeHost</span> <span class="token attr-name">host</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hostM1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>123.57.135.5:3306<span class="token punctuation">&quot;</span></span> <span class="token attr-name">user</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span>
<span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- can have multi read hosts --&gt;</span>
<span class="token comment">&lt;!--&lt;readHost host=&quot;hostS2&quot; url=&quot;47.95.211.46:3306&quot; user=&quot;root&quot;
password=&quot;root&quot; /&gt;--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>writeHost</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- &lt;writeHost host=&quot;hostM2&quot; url=&quot;localhost:3316&quot; user=&quot;root&quot;
password=&quot;123456&quot;/&gt; --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>writeHost</span> <span class="token attr-name">host</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hostM2<span class="token punctuation">&quot;</span></span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>47.95.211.46:3306<span class="token punctuation">&quot;</span></span> <span class="token attr-name">user</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span>
<span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataHost</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mycat:</span>schema</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>读写分离测试</p><p>1）创建表</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">use</span> mycat<span class="token punctuation">;</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> tb_user <span class="token punctuation">(</span>
login_name <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span> <span class="token number">32</span> <span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;登录名&#39;</span><span class="token punctuation">,</span>
user_id <span class="token keyword">BIGINT</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;用户标识&#39;</span><span class="token punctuation">,</span>
<span class="token keyword">TYPE</span> <span class="token keyword">INT</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;用户类型 1 商家，2买家&#39;</span><span class="token punctuation">,</span>
passwd <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span> <span class="token number">128</span> <span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;密码&#39;</span><span class="token punctuation">,</span>
<span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span> user_id <span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）插入数据与查询数据</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 新增</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">\`</span>tb_user<span class="token punctuation">\`</span></span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>login_name<span class="token punctuation">\`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">\`</span>user_id<span class="token punctuation">\`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">\`</span>TYPE<span class="token punctuation">\`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">\`</span>passwd<span class="token punctuation">\`</span></span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;name-
1&#39;</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&#39;passwd-A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">\`</span>tb_user<span class="token punctuation">\`</span></span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>login_name<span class="token punctuation">\`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">\`</span>user_id<span class="token punctuation">\`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">\`</span>TYPE<span class="token punctuation">\`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">\`</span>passwd<span class="token punctuation">\`</span></span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;name-
2&#39;</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&#39;passwd-A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment"># 查</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_user<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3）测试</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> @<span class="token variable">@server_id</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,25);function sn(n,nn){return p(),o("div",null,[c,s("img",{src:n.$withBase("/images/database/mysql/44.png"),alt:"mysql"},null,8,i),s("img",{src:n.$withBase("/images/database/mysql/45.png"),alt:"mysql"},null,8,r),u,s("img",{src:n.$withBase("/images/database/mysql/46.png"),alt:"mysql"},null,8,d),k,s("img",{src:n.$withBase("/images/database/mysql/47.png"),alt:"mysql"},null,8,m),v,s("img",{src:n.$withBase("/images/database/mysql/48.png"),alt:"mysql"},null,8,b),g,s("img",{src:n.$withBase("/images/database/mysql/49.png"),alt:"mysql"},null,8,h),y,s("img",{src:n.$withBase("/images/database/mysql/50.png"),alt:"mysql"},null,8,q),w,s("img",{src:n.$withBase("/images/database/mysql/51.png"),alt:"mysql"},null,8,_),f,s("img",{src:n.$withBase("/images/database/mysql/52.png"),alt:"mysql"},null,8,L),S,T,I,E,s("img",{src:n.$withBase("/images/database/mysql/53.png"),alt:"mysql"},null,8,x),s("img",{src:n.$withBase("/images/database/mysql/54.png"),alt:"mysql"},null,8,M),Q,s("p",null,[e("其他查询优化"),B,s("img",{src:n.$withBase("/images/database/mysql/55.png"),alt:"mysql"},null,8,N)]),O,s("img",{src:n.$withBase("/images/database/mysql/56.png"),alt:"mysql"},null,8,R),D,s("img",{src:n.$withBase("/images/database/mysql/57.png"),alt:"mysql"},null,8,A),$,s("img",{src:n.$withBase("/images/database/mysql/58.png"),alt:"mysql"},null,8,C),P,s("img",{src:n.$withBase("/images/database/mysql/59.png"),alt:"mysql"},null,8,U),F,s("img",{src:n.$withBase("/images/database/mysql/60.png"),alt:"mysql"},null,8,G),V,s("img",{src:n.$withBase("/images/database/mysql/61.png"),alt:"mysql"},null,8,H),Y,s("img",{src:n.$withBase("/images/database/mysql/62.png"),alt:"mysql"},null,8,W),z,s("img",{src:n.$withBase("/images/database/mysql/63.png"),alt:"mysql"},null,8,K),J,s("img",{src:n.$withBase("/images/database/mysql/64.png"),alt:"mysql"},null,8,X),j,s("img",{src:n.$withBase("/images/database/mysql/65.png"),alt:"mysql"},null,8,Z),ss,s("img",{src:n.$withBase("/images/database/mysql/66.png"),alt:"mysql"},null,8,ns),s("img",{src:n.$withBase("/images/database/mysql/67.png"),alt:"mysql"},null,8,as),s("img",{src:n.$withBase("/images/database/mysql/68.png"),alt:"mysql"},null,8,es),ts,ps,os,s("img",{src:n.$withBase("/images/database/mysql/69.png"),alt:"mysql"},null,8,ls),s("img",{src:n.$withBase("/images/database/mysql/70.png"),alt:"mysql"},null,8,cs),s("img",{src:n.$withBase("/images/database/mysql/71.png"),alt:"mysql"},null,8,is),rs,s("img",{src:n.$withBase("/images/database/mysql/72.png"),alt:"mysql"},null,8,us),s("p",null,[e("类似redo日志的刷盘机制，如下图："),ds,s("img",{src:n.$withBase("/images/database/mysql/73.png"),alt:"mysql"},null,8,ks)]),ms,s("img",{src:n.$withBase("/images/database/mysql/74.png"),alt:"mysql"},null,8,vs),bs,s("img",{src:n.$withBase("/images/database/mysql/75.png"),alt:"mysql"},null,8,gs),hs,s("img",{src:n.$withBase("/images/database/mysql/76.png"),alt:"mysql"},null,8,ys),qs,ws,_s,fs,Ls,s("img",{src:n.$withBase("/images/database/mysql/77.png"),alt:"mysql"},null,8,Ss),s("img",{src:n.$withBase("/images/database/mysql/78.png"),alt:"mysql"},null,8,Ts),Is,s("img",{src:n.$withBase("/images/database/mysql/79.png"),alt:"mysql"},null,8,Es),xs,s("img",{src:n.$withBase("/images/database/mysql/80.png"),alt:"mysql"},null,8,Ms),s("img",{src:n.$withBase("/images/database/mysql/81.png"),alt:"mysql"},null,8,Qs),Bs,s("img",{src:n.$withBase("/images/database/mysql/82.png"),alt:"mysql"},null,8,Ns),Os,Rs,Ds,s("img",{src:n.$withBase("/images/database/mysql/83.png"),alt:"mysql"},null,8,As),$s,Cs,Ps,Us,s("img",{src:n.$withBase("/images/database/mysql/84.png"),alt:"mysql"},null,8,Fs),Gs,s("img",{src:n.$withBase("/images/database/mysql/85.png"),alt:"mysql"},null,8,Vs),Hs,s("p",null,[e("MySQL提供了从服务器状态命令，可以通过 show slave status 进行查看， 比如可以看看 Seconds_Behind_Master参数的值来判断，是否有发生主从延时。"),Ys,s("img",{src:n.$withBase("/images/database/mysql/86.png"),alt:"mysql"},null,8,Ws)]),zs,Ks,Js,s("img",{src:n.$withBase("/images/database/mysql/87.png"),alt:"mysql"},null,8,Xs),s("img",{src:n.$withBase("/images/database/mysql/88.png"),alt:"mysql"},null,8,js),Zs])}const en=t(l,[["render",sn],["__file","mysql_advance.html.vue"]]);export{en as default};
