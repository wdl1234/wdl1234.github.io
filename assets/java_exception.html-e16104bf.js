import{_ as p,p as e,q as c,R as n,t as a,a1 as t}from"./framework-96b046e1.js";const o={},l=t('<h1 id="异常" tabindex="-1"><a class="header-anchor" href="#异常" aria-hidden="true">#</a> 异常</h1><h2 id="异常的概念" tabindex="-1"><a class="header-anchor" href="#异常的概念" aria-hidden="true">#</a> 异常的概念</h2><ul><li>Java 异常是一个描述在代码段中发生异常的对象，当发生异常情况时，一个代表该异常的对象被创建并且在导致该异常的方法中被抛出，而该方法可以选择自己处理异常或者传递该异常。</li></ul><h2 id="异常继承体系" tabindex="-1"><a class="header-anchor" href="#异常继承体系" aria-hidden="true">#</a> 异常继承体系</h2><p>Throwable 可以用来表示任何可以作为异常抛出的类，分为两种： Error 和 Exception</p>',5),i=n("li",null,"Error：通常是灾难性的致命的错误，是程序无法控制和处理的，当出现这些错误时，建议终止程序；",-1),u=n("br",null,null,-1),r=["src"],k=n("br",null,null,-1),d=n("li",null,"受检异常：除了 RuntimeException 及其子类以外，其他的 Exception 类及其子类都属于这种异常。",-1),v=n("li",null,[a("非受检异常：包括 RuntimeException 及其子类和 Error。"),n("br"),a(" 注意：非受检查异常为编译器不要求强制处理的异常，受检异常则是编译器要求必须处置的异常。"),n("br"),a(" Exception 这类异常分为运行时异常和非运行时异常（编译异常）：")],-1),m=n("li",null,"运行时异常 ：包括 RuntimeException 及其子类。比如 NullPointerException、IndexOutOfBoundsException。属于非受检异常，可以进行捕捉处理，也可以不处理。",-1),h=n("li",null,"非运行时异常（编译异常）：RuntimeExcaption 以外的 Exception。IOException、SQLException 已经自定义的异常，必须要进行处理。",-1),y=t(`<h2 id="java-异常的处理机制" tabindex="-1"><a class="header-anchor" href="#java-异常的处理机制" aria-hidden="true">#</a> Java 异常的处理机制</h2><p>Java 异常处理机制本质上就是抛出异常和捕捉异常。</p><ul><li>抛出异常<br> 在Java中有两种抛出异常的方式，一种是throw，直接抛出异常，另一种是throws，间接抛出异常。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 例子</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
       <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>throws exception 在方法声明中使用，表示该方法可能产生此异常，如果在方法声明处使用了throws声明异常，该方法产生异常也不必捕获，直接把异常抛出到调用该方法的地方。如果方法有调用者，那就交给调用者处理，如果调用者继续一层层抛出，那最终交给虚拟机jvm，然后程序会中断.</p><ul><li>捕获异常<br> Java中提供了try-catch和try-catch-finally处理异常结构进行异常捕获和处理，把可能出现异常的代码放入到try语句块中，并使用catch语句块捕获异常。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 例子1</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
             <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token comment">// 例子2</span>
       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>
            
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>try-catch语句块的执行流程比较简单，首先执行的是try语句块中的语句，这时可能出现以下3种情况：</p><ul><li>如果try语句块中所有语句正常执行完毕，没有发生异常，那么catch语句块中的所语句都将会被忽略。</li><li>如果try语句块在执行过程中发生异常，并且这个异常与catch语句块中声明的异常类型匹配，那么try语句块中剩下的代码都将被忽略，而相应的catch语句将会被执行。匹配是指catch所处理的异常类型与所生成的异常类型完全一致或是它的父类。</li><li>如果try语句块在执行过程中发生异常，而抛出的异常在catch语句块中没有被声明，那么方法立刻退出。</li></ul><p>使用try-catch-finally处理异常：</p><p>如果希望try语句块中不管是否发生异常，都执行某些代码，那么就需要在try-catch语句块中加入finally语句块，把要执行的语句放入finally语句块中 ，无论是否发生异常finally语句块中的代码总能被执行。</p><p>try-catch-finally语句块的执行流程大致分为以下两种情况：</p><ul><li>如果try语句块中所有语句正常执行，finally语句块也会被执行。catch语句块中的代码不会被执行。</li><li>如果try语句块在执行过程中发生异常，无论这种异常能否被catch语句块捕获到，都将执行finally语句块中的代码。</li></ul><p>注意：try-catch-finally结构中的try语句是必须存在的，catch、finally语句为可选，但是两者至少出现其中之一。 如果在try语句块或者catch语句块中存在return语句，finally语句块中的语句也会执行。发生异常时的执行顺序是，先执行catch语句块中return之前的语句，再执行finally语句块中的语句，最后执行catch语句块中的return语句退出。</p><h2 id="java-异常的处理原则" tabindex="-1"><a class="header-anchor" href="#java-异常的处理原则" aria-hidden="true">#</a> Java 异常的处理原则</h2><ul><li>具体明确：抛出的异常应能通过异常类名和message准确说明异常的类型和产生异常的原因</li><li>提早抛出：应尽可能早地发现并抛出异常，便于精确定位问题；</li><li>延迟捕获：异常的捕获和处理应尽可能延迟，让掌握更多信息的作用域来处理异常</li></ul><h2 id="java-常见异常以及错误" tabindex="-1"><a class="header-anchor" href="#java-常见异常以及错误" aria-hidden="true">#</a> Java 常见异常以及错误</h2>`,17),b=["src"],f=["src"],w=t(`<h2 id="try-catch-finally语句块的执行" tabindex="-1"><a class="header-anchor" href="#try-catch-finally语句块的执行" aria-hidden="true">#</a> try-catch-finally语句块的执行</h2><p>(1) try 块：用于捕获异常。其后可接零个或多个 catch 块，如果没有 catch 块，则必须跟一个 finally 块。 (2) catch 块：用于处理try捕获到的异常。 (3) finally 块：无论是否捕获或处理异常，finally 块里的语句都会被执行。 当在 try 块或 catch 块中遇到 return 语句时，finally 语句块将在方法返回之前被执行。</p><p>在以下 4 种特殊情况下，finally 语句块不会被执行：</p><ul><li>在finally语句块中发生了异常</li><li>在前面的代码中用了System.exit()退出程序。</li><li>程序所在的线程死亡。</li><li>关闭 CPU。</li></ul><h2 id="try-with-resources" tabindex="-1"><a class="header-anchor" href="#try-with-resources" aria-hidden="true">#</a> try-with-resources</h2><p>适用范围：任何实现 java.lang.AutoCloseable 或者 java.io.Closeable 的对象。</p><p>在 try-with-resources 语句中，任何 catch 或 finally 代码块在声明的资源关闭后运行。</p><p>使用 try-catch-finally 关闭资源：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 读取文本文件的内容</span>
<span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
    scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;D://read.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>scanner <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 try-with-resources 语句改造上面的代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;test.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 try-with-resources 语句关闭多个资源：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">BufferedInputStream</span> bin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;test.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 这里采用 &quot;;&quot; 进行分割</span>
     <span class="token class-name">BufferedOutputStream</span> bout <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;out.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> b<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">=</span> bin<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        bout<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13);function x(s,g){return e(),c("div",null,[l,n("ul",null,[i,n("li",null,[a("Exception：通常情况下是可以被程序处理的，捕获后可能恢复，并且在程序中应该尽可能地去处理这些异常。"),u,n("img",{src:s.$withBase("/images/exception/1.png"),alt:"异常关系"},null,8,r),k,a(" Java 异常分为两种：")]),d,v,m,h]),y,n("img",{src:s.$withBase("/images/exception/2.png"),alt:"异常关系"},null,8,b),n("img",{src:s.$withBase("/images/exception/3.png"),alt:"异常关系"},null,8,f),w])}const j=p(o,[["render",x],["__file","java_exception.html.vue"]]);export{j as default};
